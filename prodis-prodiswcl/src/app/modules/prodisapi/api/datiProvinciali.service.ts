/*
* SPDX-FileCopyrightText: Copyright 2022 | Regione Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Prodis
 * API per il backend della suite di Prodis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { CategorieEscluse } from '../model/categorieEscluse';
import { DatiProvinciali } from '../model/datiProvinciali';
import { ElencoProvScoperture } from '../model/elencoProvScoperture';
import { LavoratoriInForza } from '../model/lavoratoriInForza';
import { PartTime } from '../model/partTime';
import { ProspettoProvincia } from '../model/prospettoProvincia';
import { ProvIntermittenti } from '../model/provIntermittenti';
import { VistaElencoProvQ2 } from '../model/vistaElencoProvQ2';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { DatiProvincialiServiceInterface }                            from './datiProvinciali.serviceInterface';


@Injectable()
export class DatiProvincialiService implements DatiProvincialiServiceInterface {

    protected basePath = 'http://localhost:8080/prodisweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idCategorieEscluse L&#39;id della CategoriaEsclusa da eliminare.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCategorieEscluse(idCategorieEscluse: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCategorieEscluse(idCategorieEscluse: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCategorieEscluse(idCategorieEscluse: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCategorieEscluse(idCategorieEscluse: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idCategorieEscluse === null || idCategorieEscluse === undefined) {
            throw new Error('Required parameter idCategorieEscluse was null or undefined when calling deleteCategorieEscluse.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categorie-escluse/${encodeURIComponent(String(idCategorieEscluse))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina DatiProvinciali con l&#39;idProspettoProv passato come parametro.
     * @param idProspettoProv L&#39;idProspettoProv.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDatiProvinciali(idProspettoProv: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteDatiProvinciali(idProspettoProv: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteDatiProvinciali(idProspettoProv: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteDatiProvinciali(idProspettoProv: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling deleteDatiProvinciali.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<boolean>(`${this.basePath}/dati-provinciali/${encodeURIComponent(String(idProspettoProv))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina intermittente su sistema.
     * @param idIntermittenti L&#39;idIntermittenti.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIntermittenti(idIntermittenti: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteIntermittenti(idIntermittenti: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteIntermittenti(idIntermittenti: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteIntermittenti(idIntermittenti: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idIntermittenti === null || idIntermittenti === undefined) {
            throw new Error('Required parameter idIntermittenti was null or undefined when calling deleteIntermittenti.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/intermittenti/${encodeURIComponent(String(idIntermittenti))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina dati registrati su sistema.
     * @param idLavoratoriInForza idLavoratoriInForza del LavoratoreInForza da eliminare.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLavoratoriInForza(idLavoratoriInForza: number, observe?: 'body', reportProgress?: boolean): Observable<LavoratoriInForza>;
    public deleteLavoratoriInForza(idLavoratoriInForza: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LavoratoriInForza>>;
    public deleteLavoratoriInForza(idLavoratoriInForza: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LavoratoriInForza>>;
    public deleteLavoratoriInForza(idLavoratoriInForza: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idLavoratoriInForza === null || idLavoratoriInForza === undefined) {
            throw new Error('Required parameter idLavoratoriInForza was null or undefined when calling deleteLavoratoriInForza.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<LavoratoriInForza>(`${this.basePath}/lavoratori-in-forza/${encodeURIComponent(String(idLavoratoriInForza))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina dato registrato su sistema.
     * @param idPartTime id idPartTime da eliminare sul db.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePartTime(idPartTime: number, observe?: 'body', reportProgress?: boolean): Observable<PartTime>;
    public deletePartTime(idPartTime: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PartTime>>;
    public deletePartTime(idPartTime: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PartTime>>;
    public deletePartTime(idPartTime: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idPartTime === null || idPartTime === undefined) {
            throw new Error('Required parameter idPartTime was null or undefined when calling deletePartTime.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<PartTime>(`${this.basePath}/part-time/${encodeURIComponent(String(idPartTime))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * download xls dei lavoratori in forza di tutte le province di del prospetto con idProspetto.
     * @param idProspetto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadProspettoLavoratoriInForza(idProspetto: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public downloadProspettoLavoratoriInForza(idProspetto: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public downloadProspettoLavoratoriInForza(idProspetto: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public downloadProspettoLavoratoriInForza(idProspetto: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling downloadProspettoLavoratoriInForza.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.ms-excel',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/lavoratori-in-forza/excel/download/prospetto/${encodeURIComponent(String(idProspetto))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * download xls dei lavoratori in forza per una specifica provincia.
     * @param idProspettoProv 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadProvinciaLavoratoriInForza(idProspettoProv: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public downloadProvinciaLavoratoriInForza(idProspettoProv: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public downloadProvinciaLavoratoriInForza(idProspettoProv: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public downloadProvinciaLavoratoriInForza(idProspettoProv: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling downloadProvinciaLavoratoriInForza.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.ms-excel'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/lavoratori-in-forza/excel/download/provincia/${encodeURIComponent(String(idProspettoProv))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProspettoProv L&#39;idProspettoProv.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCategorieEscluseByIdProspettoProv(idProspettoProv: number, observe?: 'body', reportProgress?: boolean): Observable<Array<CategorieEscluse>>;
    public getCategorieEscluseByIdProspettoProv(idProspettoProv: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategorieEscluse>>>;
    public getCategorieEscluseByIdProspettoProv(idProspettoProv: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategorieEscluse>>>;
    public getCategorieEscluseByIdProspettoProv(idProspettoProv: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling getCategorieEscluseByIdProspettoProv.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CategorieEscluse>>(`${this.basePath}/dati-provinciali/elenco-categorie-escluse/${encodeURIComponent(String(idProspettoProv))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce true se il passaggio dal Q2 al Q3.
     * @param idProspetto L&#39;id del prospetto.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConfermaProvince(idProspetto: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getConfermaProvince(idProspetto: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getConfermaProvince(idProspetto: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getConfermaProvince(idProspetto: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling getConfermaProvince.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/dati-provinciali/conferma/${encodeURIComponent(String(idProspetto))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProspettoProv L&#39;idProspettoProv.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDatiProvincialiByIdProspettoProv(idProspettoProv: number, observe?: 'body', reportProgress?: boolean): Observable<DatiProvinciali>;
    public getDatiProvincialiByIdProspettoProv(idProspettoProv: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DatiProvinciali>>;
    public getDatiProvincialiByIdProspettoProv(idProspettoProv: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DatiProvinciali>>;
    public getDatiProvincialiByIdProspettoProv(idProspettoProv: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling getDatiProvincialiByIdProspettoProv.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DatiProvinciali>(`${this.basePath}/dati-provinciali/${encodeURIComponent(String(idProspettoProv))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce la lista di VistaElencoProvQ2 registrati su sistema.
     * @param idProspetto L&#39;idProspetto.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getElencoProvinceQ2ByIdProspetto(idProspetto: number, observe?: 'body', reportProgress?: boolean): Observable<Array<VistaElencoProvQ2>>;
    public getElencoProvinceQ2ByIdProspetto(idProspetto: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VistaElencoProvQ2>>>;
    public getElencoProvinceQ2ByIdProspetto(idProspetto: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VistaElencoProvQ2>>>;
    public getElencoProvinceQ2ByIdProspetto(idProspetto: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling getElencoProvinceQ2ByIdProspetto.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<VistaElencoProvQ2>>(`${this.basePath}/dati-provinciali/elenco-province-by-prospetto/${encodeURIComponent(String(idProspetto))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce elenco scoperture provinciali
     * @param idProspetto L&#39;idProspetto.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getElencoScopertureByIdProspetto(idProspetto: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ElencoProvScoperture>>;
    public getElencoScopertureByIdProspetto(idProspetto: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ElencoProvScoperture>>>;
    public getElencoScopertureByIdProspetto(idProspetto: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ElencoProvScoperture>>>;
    public getElencoScopertureByIdProspetto(idProspetto: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling getElencoScopertureByIdProspetto.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ElencoProvScoperture>>(`${this.basePath}/dati-provinciali/elenco-scoperture/${encodeURIComponent(String(idProspetto))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProspettoProv L&#39;idProspettoProv.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLavoratoriInForzaByIdProspettoProv(idProspettoProv: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LavoratoriInForza>>;
    public getLavoratoriInForzaByIdProspettoProv(idProspettoProv: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LavoratoriInForza>>>;
    public getLavoratoriInForzaByIdProspettoProv(idProspettoProv: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LavoratoriInForza>>>;
    public getLavoratoriInForzaByIdProspettoProv(idProspettoProv: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling getLavoratoriInForzaByIdProspettoProv.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LavoratoriInForza>>(`${this.basePath}/dati-provinciali/elenco-lavoratori-in-forza/${encodeURIComponent(String(idProspettoProv))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProspettoProv L&#39;idProspettoProv.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPartTimeByIdProspettoProv(idProspettoProv: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PartTime>>;
    public getPartTimeByIdProspettoProv(idProspettoProv: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PartTime>>>;
    public getPartTimeByIdProspettoProv(idProspettoProv: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PartTime>>>;
    public getPartTimeByIdProspettoProv(idProspettoProv: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling getPartTimeByIdProspettoProv.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PartTime>>(`${this.basePath}/dati-provinciali/elenco-part-time/${encodeURIComponent(String(idProspettoProv))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProspettoProv L&#39;idProspettoProv.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProvIntermittentiByIdProspettoProv(idProspettoProv: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ProvIntermittenti>>;
    public getProvIntermittentiByIdProspettoProv(idProspettoProv: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProvIntermittenti>>>;
    public getProvIntermittentiByIdProspettoProv(idProspettoProv: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProvIntermittenti>>>;
    public getProvIntermittentiByIdProspettoProv(idProspettoProv: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling getProvIntermittentiByIdProspettoProv.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ProvIntermittenti>>(`${this.basePath}/dati-provinciali/elenco-prov-intermittenti/${encodeURIComponent(String(idProspettoProv))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProspetto L&#39;idProspetto.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRiepilogoByIdProspetto(idProspetto: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ProspettoProvincia>>;
    public getRiepilogoByIdProspetto(idProspetto: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProspettoProvincia>>>;
    public getRiepilogoByIdProspetto(idProspetto: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProspettoProvincia>>>;
    public getRiepilogoByIdProspetto(idProspetto: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling getRiepilogoByIdProspetto.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ProspettoProvincia>>(`${this.basePath}/dati-provinciali/riepilogo/${encodeURIComponent(String(idProspetto))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali L&#39;id DatiProvinciali.
     * @param categorieEscluse 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCategorieEscluse(idDatiProvinciali: number, categorieEscluse: CategorieEscluse, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCategorieEscluse(idDatiProvinciali: number, categorieEscluse: CategorieEscluse, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCategorieEscluse(idDatiProvinciali: number, categorieEscluse: CategorieEscluse, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCategorieEscluse(idDatiProvinciali: number, categorieEscluse: CategorieEscluse, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling postCategorieEscluse.');
        }
        if (categorieEscluse === null || categorieEscluse === undefined) {
            throw new Error('Required parameter categorieEscluse was null or undefined when calling postCategorieEscluse.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/categorie-escluse/${encodeURIComponent(String(idDatiProvinciali))}`,
            categorieEscluse,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param prospettoProvincia 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postDatiProvinciali(prospettoProvincia: ProspettoProvincia, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postDatiProvinciali(prospettoProvincia: ProspettoProvincia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postDatiProvinciali(prospettoProvincia: ProspettoProvincia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postDatiProvinciali(prospettoProvincia: ProspettoProvincia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (prospettoProvincia === null || prospettoProvincia === undefined) {
            throw new Error('Required parameter prospettoProvincia was null or undefined when calling postDatiProvinciali.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/dati-provinciali`,
            prospettoProvincia,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali L&#39;idDatiProvinciali.
     * @param intermittenti 
     * @param idPartTime L&#39;idPartTime se e solo se si sta modificando un part time in un intermittente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postIntermittenti(idDatiProvinciali: number, intermittenti: ProvIntermittenti, idPartTime?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postIntermittenti(idDatiProvinciali: number, intermittenti: ProvIntermittenti, idPartTime?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postIntermittenti(idDatiProvinciali: number, intermittenti: ProvIntermittenti, idPartTime?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postIntermittenti(idDatiProvinciali: number, intermittenti: ProvIntermittenti, idPartTime?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling postIntermittenti.');
        }
        if (intermittenti === null || intermittenti === undefined) {
            throw new Error('Required parameter intermittenti was null or undefined when calling postIntermittenti.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idPartTime !== undefined && idPartTime !== null) {
            queryParameters = queryParameters.set('idPartTime', <any>idPartTime);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/intermittenti/${encodeURIComponent(String(idDatiProvinciali))}`,
            intermittenti,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali flag per continuare col salvataggio in caso di warning.
     * @param flagWarning idDatiProvinciali di cui il LavoratoreInForza da salvare è associato.
     * @param lavoratoriInForza 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postLavoratoriInForza(idDatiProvinciali: number, flagWarning: boolean, lavoratoriInForza: LavoratoriInForza, observe?: 'body', reportProgress?: boolean): Observable<LavoratoriInForza>;
    public postLavoratoriInForza(idDatiProvinciali: number, flagWarning: boolean, lavoratoriInForza: LavoratoriInForza, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LavoratoriInForza>>;
    public postLavoratoriInForza(idDatiProvinciali: number, flagWarning: boolean, lavoratoriInForza: LavoratoriInForza, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LavoratoriInForza>>;
    public postLavoratoriInForza(idDatiProvinciali: number, flagWarning: boolean, lavoratoriInForza: LavoratoriInForza, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling postLavoratoriInForza.');
        }
        if (flagWarning === null || flagWarning === undefined) {
            throw new Error('Required parameter flagWarning was null or undefined when calling postLavoratoriInForza.');
        }
        if (lavoratoriInForza === null || lavoratoriInForza === undefined) {
            throw new Error('Required parameter lavoratoriInForza was null or undefined when calling postLavoratoriInForza.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<LavoratoriInForza>(`${this.basePath}/lavoratori-in-forza/insert/${encodeURIComponent(String(idDatiProvinciali))}/${encodeURIComponent(String(flagWarning))}`,
            lavoratoriInForza,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali L&#39;idDatiProvinciali.
     * @param PartTime 
     * @param idIntermittenti L&#39;idIntermittenti valorizzato se e solo se si sta modificando un intermittente in un part time.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPartTime(idDatiProvinciali: number, PartTime: PartTime, idIntermittenti?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postPartTime(idDatiProvinciali: number, PartTime: PartTime, idIntermittenti?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postPartTime(idDatiProvinciali: number, PartTime: PartTime, idIntermittenti?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postPartTime(idDatiProvinciali: number, PartTime: PartTime, idIntermittenti?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling postPartTime.');
        }
        if (PartTime === null || PartTime === undefined) {
            throw new Error('Required parameter PartTime was null or undefined when calling postPartTime.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idIntermittenti !== undefined && idIntermittenti !== null) {
            queryParameters = queryParameters.set('idIntermittenti', <any>idIntermittenti);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/part-time/${encodeURIComponent(String(idDatiProvinciali))}`,
            PartTime,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali L&#39;id DatiProvinciali.
     * @param idCategorieEscluse L&#39;id CategorieEscluse.
     * @param categorieEscluse 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putCategorieEscluse(idDatiProvinciali: number, idCategorieEscluse: number, categorieEscluse: CategorieEscluse, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putCategorieEscluse(idDatiProvinciali: number, idCategorieEscluse: number, categorieEscluse: CategorieEscluse, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putCategorieEscluse(idDatiProvinciali: number, idCategorieEscluse: number, categorieEscluse: CategorieEscluse, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putCategorieEscluse(idDatiProvinciali: number, idCategorieEscluse: number, categorieEscluse: CategorieEscluse, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling putCategorieEscluse.');
        }
        if (idCategorieEscluse === null || idCategorieEscluse === undefined) {
            throw new Error('Required parameter idCategorieEscluse was null or undefined when calling putCategorieEscluse.');
        }
        if (categorieEscluse === null || categorieEscluse === undefined) {
            throw new Error('Required parameter categorieEscluse was null or undefined when calling putCategorieEscluse.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/categorie-escluse/${encodeURIComponent(String(idDatiProvinciali))}/${encodeURIComponent(String(idCategorieEscluse))}`,
            categorieEscluse,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProspettoProv idProspettoProv da modificare.
     * @param flagBozza 
     * @param datiProvinciali 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putDatiProvinciali(idProspettoProv: number, flagBozza: boolean, datiProvinciali: DatiProvinciali, observe?: 'body', reportProgress?: boolean): Observable<DatiProvinciali>;
    public putDatiProvinciali(idProspettoProv: number, flagBozza: boolean, datiProvinciali: DatiProvinciali, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DatiProvinciali>>;
    public putDatiProvinciali(idProspettoProv: number, flagBozza: boolean, datiProvinciali: DatiProvinciali, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DatiProvinciali>>;
    public putDatiProvinciali(idProspettoProv: number, flagBozza: boolean, datiProvinciali: DatiProvinciali, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspettoProv === null || idProspettoProv === undefined) {
            throw new Error('Required parameter idProspettoProv was null or undefined when calling putDatiProvinciali.');
        }
        if (flagBozza === null || flagBozza === undefined) {
            throw new Error('Required parameter flagBozza was null or undefined when calling putDatiProvinciali.');
        }
        if (datiProvinciali === null || datiProvinciali === undefined) {
            throw new Error('Required parameter datiProvinciali was null or undefined when calling putDatiProvinciali.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DatiProvinciali>(`${this.basePath}/dati-provinciali/${encodeURIComponent(String(idProspettoProv))}/${encodeURIComponent(String(flagBozza))}`,
            datiProvinciali,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali id DatiProvinciali.
     * @param idIntermittenti id ProvIntermittenti da modificare.
     * @param intermittenti 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putIntermittenti(idDatiProvinciali: number, idIntermittenti: number, intermittenti: ProvIntermittenti, observe?: 'body', reportProgress?: boolean): Observable<ProvIntermittenti>;
    public putIntermittenti(idDatiProvinciali: number, idIntermittenti: number, intermittenti: ProvIntermittenti, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProvIntermittenti>>;
    public putIntermittenti(idDatiProvinciali: number, idIntermittenti: number, intermittenti: ProvIntermittenti, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProvIntermittenti>>;
    public putIntermittenti(idDatiProvinciali: number, idIntermittenti: number, intermittenti: ProvIntermittenti, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling putIntermittenti.');
        }
        if (idIntermittenti === null || idIntermittenti === undefined) {
            throw new Error('Required parameter idIntermittenti was null or undefined when calling putIntermittenti.');
        }
        if (intermittenti === null || intermittenti === undefined) {
            throw new Error('Required parameter intermittenti was null or undefined when calling putIntermittenti.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ProvIntermittenti>(`${this.basePath}/intermittenti/${encodeURIComponent(String(idDatiProvinciali))}/${encodeURIComponent(String(idIntermittenti))}`,
            intermittenti,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param flagWarning flag per continuare col salvataggio in caso di warning.
     * @param idDatiProvinciali idDatiProvinciali di cui il LavoratoreInForza da salvare è associato.
     * @param idLavoratoriInForza idLavoratoriInForza del LavoratoreInForza da salvare è associato.
     * @param lavoratoriInForza 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putLavoratoriInForza(flagWarning: boolean, idDatiProvinciali: number, idLavoratoriInForza: number, lavoratoriInForza: LavoratoriInForza, observe?: 'body', reportProgress?: boolean): Observable<LavoratoriInForza>;
    public putLavoratoriInForza(flagWarning: boolean, idDatiProvinciali: number, idLavoratoriInForza: number, lavoratoriInForza: LavoratoriInForza, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LavoratoriInForza>>;
    public putLavoratoriInForza(flagWarning: boolean, idDatiProvinciali: number, idLavoratoriInForza: number, lavoratoriInForza: LavoratoriInForza, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LavoratoriInForza>>;
    public putLavoratoriInForza(flagWarning: boolean, idDatiProvinciali: number, idLavoratoriInForza: number, lavoratoriInForza: LavoratoriInForza, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (flagWarning === null || flagWarning === undefined) {
            throw new Error('Required parameter flagWarning was null or undefined when calling putLavoratoriInForza.');
        }
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling putLavoratoriInForza.');
        }
        if (idLavoratoriInForza === null || idLavoratoriInForza === undefined) {
            throw new Error('Required parameter idLavoratoriInForza was null or undefined when calling putLavoratoriInForza.');
        }
        if (lavoratoriInForza === null || lavoratoriInForza === undefined) {
            throw new Error('Required parameter lavoratoriInForza was null or undefined when calling putLavoratoriInForza.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<LavoratoriInForza>(`${this.basePath}/lavoratori-in-forza/${encodeURIComponent(String(idDatiProvinciali))}/${encodeURIComponent(String(idLavoratoriInForza))}/${encodeURIComponent(String(flagWarning))}`,
            lavoratoriInForza,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali id DatiProvinciali.
     * @param idPartTime id idPartTime da modificare.
     * @param PartTime 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPartTime(idDatiProvinciali: number, idPartTime: number, PartTime: PartTime, observe?: 'body', reportProgress?: boolean): Observable<PartTime>;
    public putPartTime(idDatiProvinciali: number, idPartTime: number, PartTime: PartTime, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PartTime>>;
    public putPartTime(idDatiProvinciali: number, idPartTime: number, PartTime: PartTime, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PartTime>>;
    public putPartTime(idDatiProvinciali: number, idPartTime: number, PartTime: PartTime, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling putPartTime.');
        }
        if (idPartTime === null || idPartTime === undefined) {
            throw new Error('Required parameter idPartTime was null or undefined when calling putPartTime.');
        }
        if (PartTime === null || PartTime === undefined) {
            throw new Error('Required parameter PartTime was null or undefined when calling putPartTime.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<PartTime>(`${this.basePath}/part-time/${encodeURIComponent(String(idDatiProvinciali))}/${encodeURIComponent(String(idPartTime))}`,
            PartTime,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * inserisce lavoratori da file per il prospetto con idProspetto
     * @param idProspetto 
     * @param attachment 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadProspettoLavoratoriInForza(idProspetto?: string, attachment?: Blob, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public uploadProspettoLavoratoriInForza(idProspetto?: string, attachment?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public uploadProspettoLavoratoriInForza(idProspetto?: string, attachment?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public uploadProspettoLavoratoriInForza(idProspetto?: string, attachment?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.ms-excel'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: FormParams;
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (idProspetto !== undefined) {
            formParams = formParams.append('idProspetto', <any>idProspetto) || formParams;
        }
        if (attachment !== undefined) {
            formParams = formParams.append('attachment', <any>attachment) || formParams;
        }

        return this.httpClient.post(`${this.basePath}/lavoratori-in-forza/excel/upload/prospetto/${encodeURIComponent(String(idProspetto))}`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * inserisce lavoratori da file per la provincia con idProspettoProv
     * @param idProspettoProv 
     * @param attachment 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadProvinciaLavoratoriInForza(idProspettoProv?: string, attachment?: Blob, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public uploadProvinciaLavoratoriInForza(idProspettoProv?: string, attachment?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public uploadProvinciaLavoratoriInForza(idProspettoProv?: string, attachment?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public uploadProvinciaLavoratoriInForza(idProspettoProv?: string, attachment?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.ms-excel'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: FormParams;
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (idProspettoProv !== undefined) {
            formParams = formParams.append('idProspettoProv', <any>idProspettoProv) || formParams;
        }
        if (attachment !== undefined) {
            formParams = formParams.append('attachment', <any>attachment) || formParams;
        }

        return this.httpClient.post(`${this.basePath}/lavoratori-in-forza/excel/upload/provincia/${encodeURIComponent(String(idProspettoProv))}`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
