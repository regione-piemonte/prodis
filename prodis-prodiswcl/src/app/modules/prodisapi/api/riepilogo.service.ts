/*
* SPDX-FileCopyrightText: Copyright 2022 | Regione Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Prodis
 * API per il backend della suite di Prodis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { ConfermaRiepilogo } from '../model/confermaRiepilogo';
import { ConfermaRiepilogoProspetto } from '../model/confermaRiepilogoProspetto';
import { EsitoStoreProcedure } from '../model/esitoStoreProcedure';
import { PostiLavoroDisp } from '../model/postiLavoroDisp';
import { Prospetto } from '../model/prospetto';
import { ProvCompensazioni } from '../model/provCompensazioni';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { RiepilogoServiceInterface }                            from './riepilogo.serviceInterface';


@Injectable()
export class RiepilogoService implements RiepilogoServiceInterface {

    protected basePath = 'http://localhost:8080/prodisweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Conferma il riepilogo del prospetto registrato su sistema.
     * @param idProspetto 
     * @param confermaRiepilogoProspetto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confermaRiepilogo(idProspetto: number, confermaRiepilogoProspetto: ConfermaRiepilogoProspetto, observe?: 'body', reportProgress?: boolean): Observable<ConfermaRiepilogo>;
    public confermaRiepilogo(idProspetto: number, confermaRiepilogoProspetto: ConfermaRiepilogoProspetto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfermaRiepilogo>>;
    public confermaRiepilogo(idProspetto: number, confermaRiepilogoProspetto: ConfermaRiepilogoProspetto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfermaRiepilogo>>;
    public confermaRiepilogo(idProspetto: number, confermaRiepilogoProspetto: ConfermaRiepilogoProspetto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling confermaRiepilogo.');
        }
        if (confermaRiepilogoProspetto === null || confermaRiepilogoProspetto === undefined) {
            throw new Error('Required parameter confermaRiepilogoProspetto was null or undefined when calling confermaRiepilogo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfermaRiepilogo>(`${this.basePath}/prospetto/confermaRiepilogo/${encodeURIComponent(String(idProspetto))}`,
            confermaRiepilogoProspetto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Conferma le compensazioni.
     * @param idProspetto L&#39;idProspetto.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confermaTornaRiepilogo(idProspetto: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public confermaTornaRiepilogo(idProspetto: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public confermaTornaRiepilogo(idProspetto: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public confermaTornaRiepilogo(idProspetto: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling confermaTornaRiepilogo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/compensazioni/confermaTornaRiepilogo/${encodeURIComponent(String(idProspetto))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce La ProvCompensazioni eliminata corrispondente a idCompensazioni.
     * @param idCompensazioni id ProvCompensazioni.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCompensazioni(idCompensazioni: number, observe?: 'body', reportProgress?: boolean): Observable<ProvCompensazioni>;
    public deleteCompensazioni(idCompensazioni: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProvCompensazioni>>;
    public deleteCompensazioni(idCompensazioni: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProvCompensazioni>>;
    public deleteCompensazioni(idCompensazioni: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idCompensazioni === null || idCompensazioni === undefined) {
            throw new Error('Required parameter idCompensazioni was null or undefined when calling deleteCompensazioni.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ProvCompensazioni>(`${this.basePath}/compensazioni/${encodeURIComponent(String(idCompensazioni))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina dati registrati su sistema.
     * @param idPostiLavoroDisp idPostiLavoroDisp del PostiLavoroDisp da eliminare.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePostiLavoroDisp(idPostiLavoroDisp: number, observe?: 'body', reportProgress?: boolean): Observable<PostiLavoroDisp>;
    public deletePostiLavoroDisp(idPostiLavoroDisp: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PostiLavoroDisp>>;
    public deletePostiLavoroDisp(idPostiLavoroDisp: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PostiLavoroDisp>>;
    public deletePostiLavoroDisp(idPostiLavoroDisp: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idPostiLavoroDisp === null || idPostiLavoroDisp === undefined) {
            throw new Error('Required parameter idPostiLavoroDisp was null or undefined when calling deletePostiLavoroDisp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<PostiLavoroDisp>(`${this.basePath}/posti-lavoro-disp/${encodeURIComponent(String(idPostiLavoroDisp))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali L&#39;idDatiProvinciali.
     * @param compensazioni 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCompensazioni(idDatiProvinciali: number, compensazioni: ProvCompensazioni, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCompensazioni(idDatiProvinciali: number, compensazioni: ProvCompensazioni, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCompensazioni(idDatiProvinciali: number, compensazioni: ProvCompensazioni, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCompensazioni(idDatiProvinciali: number, compensazioni: ProvCompensazioni, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling postCompensazioni.');
        }
        if (compensazioni === null || compensazioni === undefined) {
            throw new Error('Required parameter compensazioni was null or undefined when calling postCompensazioni.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/compensazioni/${encodeURIComponent(String(idDatiProvinciali))}`,
            compensazioni,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali L&#39;idDatiProvinciali.
     * @param postiLavoroDisp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPostiLavoroDisp(idDatiProvinciali: number, postiLavoroDisp: PostiLavoroDisp, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postPostiLavoroDisp(idDatiProvinciali: number, postiLavoroDisp: PostiLavoroDisp, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postPostiLavoroDisp(idDatiProvinciali: number, postiLavoroDisp: PostiLavoroDisp, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postPostiLavoroDisp(idDatiProvinciali: number, postiLavoroDisp: PostiLavoroDisp, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling postPostiLavoroDisp.');
        }
        if (postiLavoroDisp === null || postiLavoroDisp === undefined) {
            throw new Error('Required parameter postiLavoroDisp was null or undefined when calling postPostiLavoroDisp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/posti-lavoro-disp/${encodeURIComponent(String(idDatiProvinciali))}`,
            postiLavoroDisp,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali id DatiProvinciali.
     * @param idCompensazioni id di ProvCompensazioni da modificare.
     * @param compensazioni 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putCompensazioni(idDatiProvinciali: number, idCompensazioni: number, compensazioni: ProvCompensazioni, observe?: 'body', reportProgress?: boolean): Observable<ProvCompensazioni>;
    public putCompensazioni(idDatiProvinciali: number, idCompensazioni: number, compensazioni: ProvCompensazioni, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProvCompensazioni>>;
    public putCompensazioni(idDatiProvinciali: number, idCompensazioni: number, compensazioni: ProvCompensazioni, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProvCompensazioni>>;
    public putCompensazioni(idDatiProvinciali: number, idCompensazioni: number, compensazioni: ProvCompensazioni, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling putCompensazioni.');
        }
        if (idCompensazioni === null || idCompensazioni === undefined) {
            throw new Error('Required parameter idCompensazioni was null or undefined when calling putCompensazioni.');
        }
        if (compensazioni === null || compensazioni === undefined) {
            throw new Error('Required parameter compensazioni was null or undefined when calling putCompensazioni.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ProvCompensazioni>(`${this.basePath}/compensazioni/${encodeURIComponent(String(idDatiProvinciali))}/${encodeURIComponent(String(idCompensazioni))}`,
            compensazioni,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idDatiProvinciali id DatiProvinciali.
     * @param idPostiLavoroDisp id del PostoDiLavoroDisp da modificare.
     * @param postiLavoroDisp 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPostiLavoroDisp(idDatiProvinciali: number, idPostiLavoroDisp: number, postiLavoroDisp: PostiLavoroDisp, observe?: 'body', reportProgress?: boolean): Observable<PostiLavoroDisp>;
    public putPostiLavoroDisp(idDatiProvinciali: number, idPostiLavoroDisp: number, postiLavoroDisp: PostiLavoroDisp, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PostiLavoroDisp>>;
    public putPostiLavoroDisp(idDatiProvinciali: number, idPostiLavoroDisp: number, postiLavoroDisp: PostiLavoroDisp, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PostiLavoroDisp>>;
    public putPostiLavoroDisp(idDatiProvinciali: number, idPostiLavoroDisp: number, postiLavoroDisp: PostiLavoroDisp, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDatiProvinciali === null || idDatiProvinciali === undefined) {
            throw new Error('Required parameter idDatiProvinciali was null or undefined when calling putPostiLavoroDisp.');
        }
        if (idPostiLavoroDisp === null || idPostiLavoroDisp === undefined) {
            throw new Error('Required parameter idPostiLavoroDisp was null or undefined when calling putPostiLavoroDisp.');
        }
        if (postiLavoroDisp === null || postiLavoroDisp === undefined) {
            throw new Error('Required parameter postiLavoroDisp was null or undefined when calling putPostiLavoroDisp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<PostiLavoroDisp>(`${this.basePath}/posti-lavoro-disp/${encodeURIComponent(String(idDatiProvinciali))}/${encodeURIComponent(String(idPostiLavoroDisp))}`,
            postiLavoroDisp,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Salva in bozza il riepilogo del prospetto registrato su sistema.
     * @param idProspetto 
     * @param prospetto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public salvaBozzaRiepilogo(idProspetto: number, prospetto: Prospetto, observe?: 'body', reportProgress?: boolean): Observable<Prospetto>;
    public salvaBozzaRiepilogo(idProspetto: number, prospetto: Prospetto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Prospetto>>;
    public salvaBozzaRiepilogo(idProspetto: number, prospetto: Prospetto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Prospetto>>;
    public salvaBozzaRiepilogo(idProspetto: number, prospetto: Prospetto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling salvaBozzaRiepilogo.');
        }
        if (prospetto === null || prospetto === undefined) {
            throw new Error('Required parameter prospetto was null or undefined when calling salvaBozzaRiepilogo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Prospetto>(`${this.basePath}/prospetto/salvaBozzaRiepilogo/${encodeURIComponent(String(idProspetto))}`,
            prospetto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;esito dei calcoli eseguiti dalla store procedure.
     * @param idProspetto L&#39;id del prospetto.
     * @param cfUenteAggiornamento codice fiscale utente.
     * @param soloScoperture flg solo scoperture.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeProcedureEseguiCalcoli(idProspetto: number, cfUenteAggiornamento: string, soloScoperture: boolean, observe?: 'body', reportProgress?: boolean): Observable<EsitoStoreProcedure>;
    public storeProcedureEseguiCalcoli(idProspetto: number, cfUenteAggiornamento: string, soloScoperture: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EsitoStoreProcedure>>;
    public storeProcedureEseguiCalcoli(idProspetto: number, cfUenteAggiornamento: string, soloScoperture: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EsitoStoreProcedure>>;
    public storeProcedureEseguiCalcoli(idProspetto: number, cfUenteAggiornamento: string, soloScoperture: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idProspetto === null || idProspetto === undefined) {
            throw new Error('Required parameter idProspetto was null or undefined when calling storeProcedureEseguiCalcoli.');
        }
        if (cfUenteAggiornamento === null || cfUenteAggiornamento === undefined) {
            throw new Error('Required parameter cfUenteAggiornamento was null or undefined when calling storeProcedureEseguiCalcoli.');
        }
        if (soloScoperture === null || soloScoperture === undefined) {
            throw new Error('Required parameter soloScoperture was null or undefined when calling storeProcedureEseguiCalcoli.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EsitoStoreProcedure>(`${this.basePath}/prospetto/storeProcedure/${encodeURIComponent(String(idProspetto))}/${encodeURIComponent(String(cfUenteAggiornamento))}/${encodeURIComponent(String(soloScoperture))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
