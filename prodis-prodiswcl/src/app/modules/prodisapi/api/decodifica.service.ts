/*
* SPDX-FileCopyrightText: Copyright 2022 | Regione Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Prodis
 * API per il backend della suite di Prodis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Atecofin } from '../model/atecofin';
import { Ccnl } from '../model/ccnl';
import { Comune } from '../model/comune';
import { DecodificaGenerica } from '../model/decodificaGenerica';
import { Provincia } from '../model/provincia';
import { StatoProspetto } from '../model/statoProspetto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { DecodificaServiceInterface }                            from './decodifica.serviceInterface';


@Injectable()
export class DecodificaService implements DecodificaServiceInterface {

    protected basePath = 'http://localhost:8080/prodisweb/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAtecofin(observe?: 'body', reportProgress?: boolean): Observable<Array<Atecofin>>;
    public getAtecofin(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Atecofin>>>;
    public getAtecofin(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Atecofin>>>;
    public getAtecofin(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Atecofin>>(`${this.basePath}/decodifica/atecofin`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCcnl(observe?: 'body', reportProgress?: boolean): Observable<Array<Ccnl>>;
    public getCcnl(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ccnl>>>;
    public getCcnl(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ccnl>>>;
    public getCcnl(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ccnl>>(`${this.basePath}/decodifica/ccnl`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param idProvincia idProvincia
     * @param codComuneMin codComuneMin
     * @param dsProTComune dsProTComune
     * @param data data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getComune(idProvincia?: number, codComuneMin?: string, dsProTComune?: string, data?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<Comune>>;
    public getComune(idProvincia?: number, codComuneMin?: string, dsProTComune?: string, data?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comune>>>;
    public getComune(idProvincia?: number, codComuneMin?: string, dsProTComune?: string, data?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comune>>>;
    public getComune(idProvincia?: number, codComuneMin?: string, dsProTComune?: string, data?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idProvincia !== undefined && idProvincia !== null) {
            queryParameters = queryParameters.set('idProvincia', <any>idProvincia);
        }
        if (codComuneMin !== undefined && codComuneMin !== null) {
            queryParameters = queryParameters.set('codComuneMin', <any>codComuneMin);
        }
        if (dsProTComune !== undefined && dsProTComune !== null) {
            queryParameters = queryParameters.set('dsProTComune', <any>dsProTComune);
        }
        if (data !== undefined && data !== null) {
            queryParameters = queryParameters.set('data', <any>data.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Comune>>(`${this.basePath}/decodifica/comune`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProvincia(observe?: 'body', reportProgress?: boolean): Observable<Array<Provincia>>;
    public getProvincia(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Provincia>>>;
    public getProvincia(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Provincia>>>;
    public getProvincia(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Provincia>>(`${this.basePath}/decodifica/provincia`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoProspetto(observe?: 'body', reportProgress?: boolean): Observable<Array<StatoProspetto>>;
    public getStatoProspetto(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatoProspetto>>>;
    public getStatoProspetto(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatoProspetto>>>;
    public getStatoProspetto(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatoProspetto>>(`${this.basePath}/decodifica/stato-prospetto`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAssunzioneProtettaDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postAssunzioneProtettaDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postAssunzioneProtettaDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postAssunzioneProtettaDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postAssunzioneProtettaDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/assunzioneProtettaDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAtecofinDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postAtecofinDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postAtecofinDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postAtecofinDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postAtecofinDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/atecofinDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCategoriaEscluseDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postCategoriaEscluseDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postCategoriaEscluseDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postCategoriaEscluseDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postCategoriaEscluseDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/categoriaEscluseDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCausaSospensioneDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postCausaSospensioneDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postCausaSospensioneDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postCausaSospensioneDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postCausaSospensioneDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/causaSospensioneDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCcnlDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postCcnlDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postCcnlDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postCcnlDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postCcnlDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/ccnlDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postComuneDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postComuneDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postComuneDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postComuneDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postComuneDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/comuneDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postContrattiDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postContrattiDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postContrattiDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postContrattiDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postContrattiDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/contrattiDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postDichiaranteDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postDichiaranteDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postDichiaranteDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postDichiaranteDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postDichiaranteDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/dichiaranteDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postQualificaDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postQualificaDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postQualificaDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postQualificaDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postQualificaDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/qualificaDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRegioneDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postRegioneDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postRegioneDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postRegioneDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postRegioneDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/regioneDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSoggettiDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postSoggettiDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postSoggettiDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postSoggettiDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postSoggettiDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/soggettiDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postStatiEsteriDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postStatiEsteriDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postStatiEsteriDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postStatiEsteriDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postStatiEsteriDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/statiEsteriDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postStatoConcessioneDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postStatoConcessioneDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postStatoConcessioneDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postStatoConcessioneDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postStatoConcessioneDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/statoConcessioneDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param filtro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTipologiaLavoratoreDecodifica(filtro: DecodificaGenerica, observe?: 'body', reportProgress?: boolean): Observable<Array<DecodificaGenerica>>;
    public postTipologiaLavoratoreDecodifica(filtro: DecodificaGenerica, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DecodificaGenerica>>>;
    public postTipologiaLavoratoreDecodifica(filtro: DecodificaGenerica, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DecodificaGenerica>>>;
    public postTipologiaLavoratoreDecodifica(filtro: DecodificaGenerica, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtro === null || filtro === undefined) {
            throw new Error('Required parameter filtro was null or undefined when calling postTipologiaLavoratoreDecodifica.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<DecodificaGenerica>>(`${this.basePath}/decodifica/tipologiaLavoratoreDecodifica`,
            filtro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
